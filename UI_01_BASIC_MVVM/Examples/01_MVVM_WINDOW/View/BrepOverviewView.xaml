<Window x:Class="UI_01_BASIC_MVVM.Examples._01_MVVM_WINDOW.View.BrepOverviewView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:UI_01_BASIC_MVVM.Examples._01_MVVM_WINDOW.ViewModel"
        xmlns:local="clr-namespace:UI_01_BASIC_MVVM.Examples._01_MVVM_WINDOW.View"
        xmlns:converters="clr-namespace:UI_01_BASIC_MVVM.Converters"
        d:DataContext="{d:DesignInstance d:Type=vm:MainViewModel, IsDesignTimeCreatable=True}"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip"
        SizeToContent="WidthAndHeight"
        Title="01 MVVM WINDOW Brep overview"
        Height="350"
        Width="500"
        MinHeight="250"
        MinWidth="400">
    
    <!-- 
    x:class: is the codebehind class (AddBrepView.xaml.cs)
    xmlns: default xaml namespace
    x: is a xaml standard namespace
    d: is blend for previews in VS
    mc: is a markup compatibility namespace
    vm: is a namespace to our viewmodel
    local: is a namespace to our view
    d:DataContext is used for design time data (vs preview)
    mc:Ignorable is used to ignore the d:DataContext in runtime
    ResizeMode is set to CanResizeWithGrip to allow resizing
    -->
    
    <!-- Attention that DataContext is not set here - I chose to set in the codebehind (AddBrepView.xaml.cs) -->
    <!-- That way I could inject the RhinoDoc -->
    
    <!-- Hide headers in grid view -->
    <Window.Resources>
        <Style x:Key="hiddenHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Visibility" Value="Collapsed" />
        </Style>
        
        <converters:InverseVisibilityConverter x:Key="InverseVisibilityConverter"/>
        <converters:VisibilityConverter x:Key="VisibilityConverter"/>
    </Window.Resources>

    
    <!-- Setup main grid. Alternatively we could use a stackpanel and have padding on all items -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="20"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="20"/>
            <RowDefinition Height="*" MinHeight="20"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="20"/>
        </Grid.ColumnDefinitions>
        
        <!-- Title with counts -->
        <StackPanel Grid.Row="1" Grid.Column="1">
            <Label FontWeight="Bold">Welcome to your first WPF window</Label>
            <TextBlock TextWrapping="WrapWithOverflow" Margin="0 10 0 0">
                This features:
                <LineBreak/>- An overall WPF UI in a grid as a child window of Rhino
                <LineBreak/>- 2 way binding with Rhino document
                <LineBreak/>- Listeners on Rhino Selection and Object attributes
                <LineBreak/>- An BrepItemViewModel and a MainViewModel
                <LineBreak/>- A small method to retrieve object areas
                
            </TextBlock>

            <StackPanel Orientation="Horizontal">
            <Label Margin="0 0 10 0" Content="{Binding BrepCount, Mode=OneWay}" ContentStringFormat="Breps in the file: {0:0}" d:Content="0"/>
            <Label Content="{Binding SelectedBrepCount, Mode=OneWay}" ContentStringFormat="Selected: {0:0}" d:Content="0"/>
            
            </StackPanel>
        </StackPanel>

        
        <!-- in case there are no breps-->
        <StackPanel Grid.Row="2" Grid.Column="1" >
            
        
        <Label Foreground="Red"
                Visibility="{Binding Path=HasAnyBreps, Converter={StaticResource InverseVisibilityConverter}}" d:Visibility="Visible">Create breps in your file and see the list updating!</Label>
        
        <!-- Wrapping our list in a scroll viewer -->
        <ScrollViewer Visibility="{Binding Path=HasAnyBreps, Converter={StaticResource VisibilityConverter}}" d:Visibility="Visible" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" >

            
            <!-- We bind the list to Breps in our viewmodel (AddBrepViewModel.cs) -->
            <!-- Binding the selected required some codebehind hacks, see the xaml.cs file -->
            
            <!-- The d:ItemsSource gives us the preview in VS -->
            <ListView x:Name="BrepListView" SelectionMode="Multiple"
                      ItemsSource="{Binding Breps, Mode=OneWay}" d:ItemsSource="{d:SampleData ItemCount=4}">
           
                <ListView.View>
                    <GridView  ColumnHeaderContainerStyle="{StaticResource hiddenHeaderStyle}">

                        <!-- Here we create what each should look like -->
                        <!-- the datacontext here is automatically set to our Breps collection in the ListView
                            This means that Guid, Name etc are (dependency)properties of the BrepItemViewModel -->
                        <GridViewColumn Header="Guid" DisplayMemberBinding="{Binding Guid}"/>
                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="70"/>
                        <GridViewColumn Header="Area" DisplayMemberBinding="{Binding Area, StringFormat={}{0:0.0}}" Width="60"/>
                        
                        <!-- Instead of text we insert a button in the Delete Column -->
                        <GridViewColumn Header="Delete">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <!-- The Command of the button needs to bind to our main viewmodel (AddBrepViewModel.cs) 
                                    However, the DataContext of the button is the BrepItemViewModel.
                                    The workaround is to use RelativeSource to find the parent ListView and then the DataContext of that -->
                                    <Button x:Name="BtnDeleteItem" Content="Delete"
                                            Command="{Binding Path=DataContext.DeleteBrepCommand,RelativeSource={RelativeSource AncestorType=ListView}}"
                                            CommandParameter="{Binding}" Height="15" FontSize="8" Padding="1" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>

                    </GridView>
                </ListView.View>
            </ListView>
        </ScrollViewer>
        </StackPanel>
        
        <Grid Grid.Row="3" Grid.Column="1">
            <Grid.ColumnDefinitions>

                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="2">Example 02 Styling (todo) --></Button>
        </Grid>
    </Grid>
</Window>
